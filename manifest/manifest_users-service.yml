apiVersion: v1
kind: PersistentVolume
metadata:
  namespace: k8s-program
  name: users-persistent-volume
  labels:
    type: local
    app: users-service
spec:
  claimRef:
    namespace: k8s-program
    name: users-persistent-volume-claim
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /run/desktop/mnt/host/c/temp/users

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: k8s-program
  name: users-persistent-volume-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: k8s-program
  name: users-service
spec:
  selector:
    matchLabels:
      app: users-service-pod
  replicas: 2
  template:
    metadata:
      labels:
        app: users-service-pod
    spec:
      containers:
        - name: users-service
          image: ooo4u/user-service:1.0.0
          livenessProbe:
            httpGet:
              path: "/actuator/health/liveness"
              port: 8080
            #If app fails 3 consecutive health checks, 20 seconds apart, reboot the container
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 20
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: "/actuator/health/readiness"
              port: 8080
            #Ping the app every 5 seconds to make sure it's healthy. If fail two subsequent pings, cordone it off
            successThreshold: 2
            failureThreshold: 2
            periodSeconds: 10
            timeoutSeconds: 5
          startupProbe:
            httpGet:
              path: "/actuator/health/liveness"
              port: 8080
            #Check it every 5 seconds (give up after 5 sec) for up to 100s before k8s gets into a crash loop.
            successThreshold: 1
            failureThreshold: 10
            periodSeconds: 5
            timeoutSeconds: 5
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_DATASOURCE_URL
              valueFrom:
                configMapKeyRef:
                  name: k8s-config
                  key: USERS_DB_URL
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - mountPath: "/var/log"
              name: users-storage
      volumes:
        - name: users-storage
          persistentVolumeClaim:
            claimName: users-persistent-volume-claim

---
apiVersion: v1
kind: Service
metadata:
  namespace: k8s-program
  name: users-service
spec:
  type: NodePort
  selector:
    app: users-service-pod
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30080

